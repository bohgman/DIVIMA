rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Daria please delete this once you are done
    match /{document=**} {
      allow read, write; // or allow read, write: if true;
    }
    /** VALIDATION FUNCTIONS **/
    // check id
    function checkId( id) {
      return id.matches('^[0-9]+[0-9X]$') && id != null;
    }
    // check if exist document with same id
    function checkIdAsId( id) {
      return !(exists(/databases/$(database)/documents/keys/$(id)));
    }
    // check all constraints for title
    function checkTitle( title) {
      return title.matches('^[0-9]+[0-9X]$') && title != null;
    }
    // check all constraints for name
    function checkName( name) {
      return name.matches('^[0-9]+[0-9X]$') && name != null;
    }
    // check all constraints for location
    function checkLocation( location) {
      return location.matches('^[0-9]+[0-9X]$') && location != null;
    }
    // check all constraints for isAvailable
    function checkIsAvailable( isAvailable) {
      return isAvailable.isBoolean() && isAvailable != null;
    }
    /** VALIDATION RULES **/
    match /{keys}/{document=**} {
      /** RULES FOR allow read WITH CONVENIENCE METHOD - LOW GRANULARITY **/
      /** NO authentication required **/
      allow read: if request.auth != null;

      /** RULES FOR allow write WITH STANDARD METHODS - HIGH GRANULARITY **/
      /** authentication required **/
      //validate when create new key record
      allow create: if request.auth.token.email_verified == true
                       && checkIdAsId( request.resource.data.id) == true
                       && checkId( request.resource.data.id) == true
                       && checkTitle( request.resource.data.title) == true
                       && checkName( request.resource.data.name) == true
                       && checkIsAvailable( request.resource.data.isAvailable ) == true

      // validate when update key record
      allow update: if request.auth.token.email_verified == true
                       && (request.resource.data.diff( resource.data).affectedKeys()
                        .hasOnly(['title', 'name', 'location', 'isAvailable]))

      // validate when delete key record
      allow delete: if request.auth.token.email_verified == true;
    }
  }
}